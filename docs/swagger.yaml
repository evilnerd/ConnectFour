basePath: /
definitions:
  model.GameStatus:
    enum:
    - created
    - started
    - finished
    - aborted
    - unknown
    type: string
    x-enum-comments:
      Unknown: used in the client to indicate the status should be fetched.
    x-enum-varnames:
    - Created
    - Started
    - Finished
    - Aborted
    - Unknown
  service.CreateUserResponse:
    properties:
      email:
        description: |-
          User's email address
          example: player1@example.com
        type: string
      name:
        description: |-
          User's display name
          example: Player1
        type: string
    type: object
  service.ErrorResponse:
    properties:
      error:
        description: |-
          Error message
          example: Game not found
        type: string
    type: object
  service.GameStateResponse:
    properties:
      board:
        additionalProperties:
          type: string
        description: "Game board representation\nexample: {\n\t\t\t \t\"1\": \"       \",\n\t\t\t
          \t\"2\": \"       \",\n\t\t\t \t\"3\": \"X  O   \",\n\t\t\t \t\"4\": \"X
          OX  O\",\n\t\t     \t\"5\": \"XOXOOOX\",\n\t\t     \t\"6\": \"XOXOXOX\"\n\t\t
          \   }"
        type: object
      key:
        description: |-
          Unique identifier for the game
          example: three-word-key
        type: string
      player_turn:
        description: |-
          Player whose turn it is (1 or 2)
          example: 1
        type: integer
      player_turn_email:
        description: |-
          Email of the player whose turn it is
          example: player1@example.com
        type: string
      player_turn_name:
        description: |-
          Name of the player whose turn it is
          example: Player1
        type: string
      player1_email:
        description: |-
          Email of player 1
          example: player1@example.com
        type: string
      player1_name:
        description: |-
          Name of player 1
          example: Player1
        type: string
      player2_email:
        description: |-
          Email of player 2
          example: player2@example.com
        type: string
      player2_name:
        description: |-
          Name of player 2
          example: Player2
        type: string
      status:
        allOf:
        - $ref: '#/definitions/model.GameStatus'
        description: |-
          Current status of the game
          example: started
          allowed:
    type: object
  service.LoginRequest:
    properties:
      email:
        description: |-
          User's email address
          Required: true
          example: player@example.com
        type: string
      password:
        description: |-
          User's password
          Required: true
          example: password123
        type: string
    type: object
  service.NewGameRequest:
    properties:
      public:
        description: |-
          Whether the game should be public or private
          example: true
        type: boolean
    type: object
  service.PlayMoveRequest:
    properties:
      column:
        description: |-
          Column where the player wants to place their disc (0-indexed)
          Required: true
          minimum: 0
          maximum: 6
          example: 3
        type: integer
    type: object
  service.RegisterRequest:
    properties:
      email:
        description: |-
          User's email address
          Required: true
          example: player@example.com
        type: string
      name:
        description: |-
          User's display name
          Required: true
          example: Player1
        type: string
      password:
        description: |-
          User's password
          Required: true
          example: password123
        type: string
    type: object
host: localhost:8443
info:
  contact:
    email: support@example.com
    name: ConnectFour Support
    url: http://www.example.com/support
  description: API for the ConnectFour online game service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ConnectFour API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Returns a greeting message to confirm the server is running
      produces:
      - text/plain
      responses:
        "200":
          description: Let's play a game.
          schema:
            type: string
      summary: Server greeting endpoint
      tags:
      - general
  /games:
    get:
      consumes:
      - application/json
      description: Returns a list of public games that are open to join
      produces:
      - application/json
      responses:
        "200":
          description: List of open games
          schema:
            items:
              $ref: '#/definitions/service.GameStateResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List open games
      tags:
      - games
    post:
      consumes:
      - application/json
      description: Creates a new game with the authenticated user as player 1
      parameters:
      - description: Game options
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/service.NewGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Game created
          schema:
            $ref: '#/definitions/service.GameStateResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new game
      tags:
      - games
  /games/{key}:
    get:
      consumes:
      - application/json
      description: Returns the current state of a specific game
      parameters:
      - description: Game key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Game state
          schema:
            $ref: '#/definitions/service.GameStateResponse'
        "400":
          description: Invalid game key
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "404":
          description: Game not found
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get game state
      tags:
      - games
  /games/{key}/join:
    post:
      consumes:
      - application/json
      description: Allows the authenticated user to join a game as player 2
      parameters:
      - description: Game key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully joined the game
          schema:
            $ref: '#/definitions/service.GameStateResponse'
        "400":
          description: Game is already full or not in a joinable state
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "404":
          description: Game not found
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Join a game
      tags:
      - games
  /games/{key}/play:
    post:
      consumes:
      - application/json
      description: Allows the current player to make a move in a game the player is
        part of.
      parameters:
      - description: Game key
        in: path
        name: key
        required: true
        type: string
      - description: Move details
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/service.PlayMoveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Move successfully played
          schema:
            $ref: '#/definitions/service.GameStateResponse'
        "400":
          description: Invalid move or not player's turn
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "404":
          description: Game not found
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Play a move
      tags:
      - games
  /games/my:
    get:
      consumes:
      - application/json
      description: Returns a list of games where the authenticated user is a player
      produces:
      - application/json
      responses:
        "200":
          description: List of user's games
          schema:
            items:
              $ref: '#/definitions/service.GameStateResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List my games
      tags:
      - games
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/service.LoginRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      summary: User login
      tags:
      - authentication
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user account
      parameters:
      - description: User registration details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/service.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/service.CreateUserResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/service.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/service.ErrorResponse'
      summary: User registration
      tags:
      - authentication
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
